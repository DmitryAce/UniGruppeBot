import sqlite3
import telebot
from init_sql import create_tables
from views import *
from markups import *
from callbacks import register_callbacks
from dotenv import load_dotenv
import os, re, time, requests, sys
from datetime import datetime
import threading


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('chat_users.db', check_same_thread=False)
create_tables(conn)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
load_dotenv()

bot_token = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(bot_token)






@bot.message_handler(content_types=["new_chat_members"])
def handle_new_chat_member(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –Ω–æ–≤—ã–π —á–∞—Ç."""
    for new_member in message.new_chat_members:
        if new_member.id == bot.get_me().id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –±–æ—Ç
            add_chat(message)  # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            user_who_added_bot = message.from_user  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±–∞–≤–∏–≤—à–∏–π –±–æ—Ç–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_member = bot.get_chat_member(message.chat.id, bot.get_me().id)
            if bot_member.status != "administrator":
                try:
                    bot.reply_to(
                        message,
                        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —è –º–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. üôè",
                    )
                except telebot.apihelper.ApiTelegramException as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {message.chat.id}: {e}")

            # –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            reply, group_name = add_user(
                user_who_added_bot.id,
                message.chat.id,
                user_who_added_bot.username,
                True,  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            )

            try:
                bot.reply_to(
                    message,
                    reply + f" –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—è –≤ –±–µ—Å–µ–¥—É, {user_who_added_bot.username}!",
                )
            except telebot.apihelper.ApiTelegramException as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {message.chat.id}: {e}")
            break


@bot.message_handler(commands=["getinfo"])
def handle_get_info(message):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ —Ç–æ–ø–∏–∫–µ."""
    thread_id = message.message_thread_id if message.message_thread_id else None
    reply = f"CHAT:\n{message.chat}\nTHREAD:{message.message_thread_id}\n"
    reply2 = f"{message.chat}"

    if thread_id:
        bot.send_message(
            message.chat.id,
            reply,
            message_thread_id=thread_id,
        )
    else:
        bot.send_message(message.chat.id, reply2)


@bot.message_handler(commands=["myid"])
def handle_my_id(message):
    """–í—ã–≤–æ–¥–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    thread_id = message.message_thread_id if message.message_thread_id else None
    reply = f"–¢–≤–æ–π ID, —Ä–∞–±–æ—Ç—è–≥–∞ ({message.from_user.username}): {message.from_user.id}"

    if thread_id:
        bot.send_message(
            message.chat.id,
            reply,
            message_thread_id=thread_id,
        )
    else:
        bot.send_message(message.chat.id, reply)


@bot.message_handler(commands=["initqueue"])
def handle_init_queue(message):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—á–µ—Ä–µ–¥—å."""
    thread_id = message.message_thread_id if message.message_thread_id else None
    response = init_queue(message, thread_id)

    if thread_id:
        bot.send_message(
            message.chat.id,
            response,
            message_thread_id=thread_id,
        )
    else:
        bot.send_message(message.chat.id, response)


@bot.message_handler(commands=["killqueue"])
def handle_kill_queue(message):
    """–£–¥–∞–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –Ω–µ–µ."""
    thread_id = message.message_thread_id if message.message_thread_id else None
    response = kill_queue(message, thread_id)

    if thread_id:
        bot.send_message(
            message.chat.id,
            response,
            message_thread_id=thread_id,
        )
    else:
        bot.send_message(message.chat.id, response)


@bot.message_handler(commands=["registerme"])
def register(message):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    thread_id = message.message_thread_id if message.message_thread_id else None
    user = message.from_user
    reply, group_name = add_user(
        user.id,
        message.chat.id,
        user.username,
        False,
    )
    if thread_id:
        bot.send_message(
            message.chat.id,
            reply,
            message_thread_id=thread_id,
        )
    else:
        bot.send_message(message.chat.id, reply)


@bot.message_handler(commands=["queue"])
def handle_queue(message, user_id=None):
    if user_id is None:
        user_id = message.from_user.id

    thread_id = message.message_thread_id if message.message_thread_id else None

    cursor = conn.cursor()
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—á–µ—Ä–µ–¥–∏
    if thread_id:
        cursor.execute('SELECT queue_id, bot_message_id FROM queues WHERE chat_id = ? AND thread_id = ?', (chat_id, thread_id))
    else:
        cursor.execute('SELECT queue_id, bot_message_id FROM queues WHERE chat_id = ? AND thread_id IS NULL', (chat_id,))

    queue_data = cursor.fetchone()

    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not queue_data:
        try:
            bot.delete_message(chat_id, message.message_id)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è

        bot.send_message(
            chat_id=chat_id,
            text="–û—á–µ—Ä–µ–¥—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /initqueue –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏.",
            parse_mode="html",
            message_thread_id=thread_id if thread_id else None
        )
        cursor.close()
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—á–µ—Ä–µ–¥–∏
    queue_id, bot_message_id = queue_data
    cursor.execute('SELECT user_id FROM enqueued WHERE user_id = ? AND queue_id = ?', (user_id, queue_id))
    user_in_queue = cursor.fetchone() is not None

    reply = get_queue(message, thread_id, user_id)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        bot.delete_message(chat_id, message.message_id)
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if bot_message_id:
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=bot_message_id,
                text=reply,
                parse_mode="html",
                reply_markup=queue_buttons(queue_id)
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
        sent_message = bot.send_message(
            chat_id=chat_id,
            text=reply,
            parse_mode="html",
            reply_markup=queue_buttons(queue_id),
            message_thread_id=thread_id if thread_id else None
        )
        new_bot_message_id = sent_message.message_id

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ bot_message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            'UPDATE queues SET bot_message_id = ? WHERE queue_id = ?',
            (new_bot_message_id, queue_id)
        )
        conn.commit()

    cursor.close()


@bot.message_handler(commands=['pop'])
def pop_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã pop"""
    user_id = message.from_user.id
    thread_id = message.message_thread_id if message.message_thread_id else None
    args = message.text.split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
    if len(args) != 2:
        try:
            bot.delete_message(message.chat.id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        bot.send_message(
            message.chat.id,
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã pop –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ‚Ññ –≤ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: /pop 1",
            parse_mode="html",
            thread_id=thread_id if thread_id else None,
        )
        return

    pos = args[1]
    response = pop_position(message, thread_id, user_id, pos)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—á–µ—Ä–µ–¥–∏
    cursor = conn.cursor()
    cursor.execute(
        'SELECT queue_id, bot_message_id FROM queues WHERE chat_id = ? AND thread_id = ?',
        (message.chat.id, thread_id),
    )
    queue_data = cursor.fetchone()

    if queue_data:
        queue_id, bot_message_id = queue_data
        reply = get_queue(message, thread_id, user_id)

        if bot_message_id:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
                bot.edit_message_text(
                    response + "\n\n" + reply,
                    chat_id=message.chat.id,
                    message_id=bot_message_id,
                    reply_markup=queue_buttons(queue_id),
                    parse_mode="html",
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {e}")

                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = bot.send_message(
                    message.chat.id,
                    response + "\n\n" + reply,
                    parse_mode="html",
                    reply_markup=queue_buttons(queue_id),
                    thread_id=thread_id if thread_id else None,
                )
                new_bot_message_id = sent_message.message_id

                # –û–±–Ω–æ–≤–ª—è–µ–º bot_message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute(
                    'UPDATE queues SET bot_message_id = ? WHERE queue_id = ?',
                    (new_bot_message_id, queue_id),
                )
                conn.commit()
        else:
            # –ï—Å–ª–∏ bot_message_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = bot.send_message(
                message.chat.id,
                response + "\n\n" + reply,
                parse_mode="html",
                reply_markup=queue_buttons(queue_id),
                thread_id=thread_id if thread_id else None,
            )
            new_bot_message_id = sent_message.message_id

            # –û–±–Ω–æ–≤–ª—è–µ–º bot_message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute(
                'UPDATE queues SET bot_message_id = ? WHERE queue_id = ?',
                (new_bot_message_id, queue_id),
            )
            conn.commit()
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        bot.send_message(
            message.chat.id,
            "–û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            parse_mode="html",
            thread_id=thread_id if thread_id else None,
        )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    cursor.close()


@bot.message_handler(commands=['swap'])
def swap_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã swap"""
    user_id = message.from_user.id
    thread_id = message.message_thread_id if message.message_thread_id else None
    args = message.text.split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –¥–≤–µ –ø–æ–∑–∏—Ü–∏–∏
    if len(args) != 3:
        try:
            bot.delete_message(message.chat.id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        bot.send_message(
            message.chat.id,
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã swap –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–µ –ø–æ–∑–∏—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: /swap 4 3",
            parse_mode="html",
            message_thread_id=thread_id if thread_id else None,
        )
        return

    pos1, pos2 = args[1], args[2]
    response = swap_positions(message, thread_id, user_id, pos1, pos2)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—á–µ—Ä–µ–¥–∏
    cursor = conn.cursor()
    cursor.execute(
        'SELECT queue_id, bot_message_id FROM queues WHERE chat_id = ? AND thread_id = ?',
        (message.chat.id, thread_id),
    )
    queue_data = cursor.fetchone()

    if queue_data:
        queue_id, bot_message_id = queue_data
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—á–µ—Ä–µ–¥–∏
        reply = get_queue(message, thread_id, user_id)

        if bot_message_id:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.edit_message_text(
                    response + "\n\n" + reply,
                    chat_id=message.chat.id,
                    message_id=bot_message_id,
                    reply_markup=queue_buttons(queue_id),
                    parse_mode="html",
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {e}")

                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                sent_message = bot.send_message(
                    message.chat.id,
                    response + "\n\n" + reply,
                    parse_mode="html",
                    reply_markup=queue_buttons(queue_id),
                    thread_id=thread_id if thread_id else None,
                )
                new_bot_message_id = sent_message.message_id

                # –û–±–Ω–æ–≤–ª—è–µ–º bot_message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute(
                    'UPDATE queues SET bot_message_id = ? WHERE queue_id = ?',
                    (new_bot_message_id, queue_id),
                )
                conn.commit()
        else:
            # –ï—Å–ª–∏ bot_message_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = bot.send_message(
                message.chat.id,
                response + "\n\n" + reply,
                parse_mode="html",
                reply_markup=queue_buttons(queue_id),
                thread_id=thread_id if thread_id else None,
            )
            new_bot_message_id = sent_message.message_id

            # –û–±–Ω–æ–≤–ª—è–µ–º bot_message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute(
                'UPDATE queues SET bot_message_id = ? WHERE queue_id = ?',
                (new_bot_message_id, queue_id),
            )
            conn.commit()
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        bot.send_message(
            message.chat.id,
            "–û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            parse_mode="html",
            thread_id=thread_id if thread_id else None,
        )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    cursor.close()



@bot.message_handler(commands=['insert'])
def insert_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã insert"""
    user_id = message.from_user.id
    thread_id = message.message_thread_id if message.message_thread_id else None
    args = message.text.split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if len(args) != 3:
        try:
            bot.delete_message(message.chat.id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        bot.send_message(
            message.chat.id,
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã insert –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —á–µ–ª–æ–≤–µ–∫–∞ –∏ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é. –ü—Ä–∏–º–µ—Ä: /insert 3 1",
            parse_mode="html",
            thread_id=thread_id if thread_id else None,
        )
        return

    current_pos, new_pos = args[1], args[2]
    response = insert_position(message, thread_id, user_id, current_pos, new_pos)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—á–µ—Ä–µ–¥–∏
    cursor = conn.cursor()
    cursor.execute(
        'SELECT queue_id, bot_message_id FROM queues WHERE chat_id = ? AND thread_id = ?',
        (message.chat.id, thread_id),
    )
    queue_data = cursor.fetchone()

    if queue_data:
        queue_id, bot_message_id = queue_data
        reply = get_queue(message, thread_id, user_id)

        if bot_message_id:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
                bot.edit_message_text(
                    response + "\n\n" + reply,
                    chat_id=message.chat.id,
                    message_id=bot_message_id,
                    reply_markup=queue_buttons(queue_id),
                    parse_mode="html",
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {e}")

                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = bot.send_message(
                    message.chat.id,
                    response + "\n\n" + reply,
                    parse_mode="html",
                    reply_markup=queue_buttons(queue_id),
                    thread_id=thread_id if thread_id else None,
                )
                new_bot_message_id = sent_message.message_id

                # –û–±–Ω–æ–≤–ª—è–µ–º bot_message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute(
                    'UPDATE queues SET bot_message_id = ? WHERE queue_id = ?',
                    (new_bot_message_id, queue_id),
                )
                conn.commit()
        else:
            # –ï—Å–ª–∏ bot_message_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = bot.send_message(
                message.chat.id,
                response + "\n\n" + reply,
                parse_mode="html",
                reply_markup=queue_buttons(queue_id),
                thread_id=thread_id if thread_id else None,
            )
            new_bot_message_id = sent_message.message_id

            # –û–±–Ω–æ–≤–ª—è–µ–º bot_message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute(
                'UPDATE queues SET bot_message_id = ? WHERE queue_id = ?',
                (new_bot_message_id, queue_id),
            )
            conn.commit()
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        bot.send_message(
            message.chat.id,
            "–û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            parse_mode="html",
            thread_id=thread_id if thread_id else None,
        )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    cursor.close()



@bot.message_handler(commands=["feedback"])
def handle_feedback(message):
    user_id = message.from_user.id
    thread_id = message.message_thread_id if message.message_thread_id else None
    user_name = message.from_user.username
    chat_id = message.chat.id
    args = message.text

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –≤–∫–ª—é—á–∞—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    match = re.match(r"^/feedback(@\w+)?\s+([\s\S]+)$", args, re.DOTALL)

    if not match:
        bot.reply_to(
            message,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /feedback –¢–µ–∫—Å—Ç —Ç–µ–∫—Å—Ç —Ç–µ–∫—Å—Ç",
            message_thread_id=thread_id if thread_id else None,
        )
        return

    message_text = match.group(2).strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    target_user_id = 811311997  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–∑—ã–≤
    feedback_message = f"–û—Ç–∑—ã–≤ –æ—Ç {user_name} ({user_id}) –∏–∑ —á–∞—Ç–∞ {chat_id}:\n\n{message_text}"

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(target_user_id, feedback_message)
        bot.reply_to(
            message,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
            message_thread_id=thread_id if thread_id else None,
        )
    except Exception as e:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.reply_to(
            message,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}",
            message_thread_id=thread_id if thread_id else None,
        )





register_callbacks(bot, conn, handle_queue, add_user)


running = True

def polling_loop():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç –≤ —Ä–µ–∂–∏–º–µ polling."""
    global running
    while running:
        try:
            bot.polling(none_stop=True, timeout=10)
        except requests.exceptions.ReadTimeout as e:
            print(f"[{datetime.now()}] ReadTimeout: {e}. Restarting bot...")
            time.sleep(5)
        except Exception as e:
            print(f"[{datetime.now()}] Unexpected error: {e}. Restarting bot...")
            time.sleep(5)

def shutdown():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã."""
    global running
    print("Shutting down bot...")
    running = False
    bot.stop_polling()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç polling
    print("Bot stopped.")

# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
try:
    print("Starting the bot...")
    polling_thread = threading.Thread(target=polling_loop)
    polling_thread.start()  # –ó–∞–ø—É—Å–∫ polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ

    while True:
        time.sleep(1)  # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ–∂–∏–¥–∞–µ—Ç

except KeyboardInterrupt:
    print("\nBot stopped by user.")
    shutdown()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã

finally:
    if polling_thread.is_alive():
        polling_thread.join()  # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
    print("Exiting program...")
    sys.exit(0)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É